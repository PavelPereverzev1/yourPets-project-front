{"version":3,"file":"static/js/761.b06b0c10.chunk.js","mappings":"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","sources":["components/BackgroundImg/BackgroundImg.styled.js","components/BackgroundImg/BackgroundImg.jsx","components/ClearInputFieldButton/ClearInputFieldButton.styled.js","components/ClearInputFieldButton/ClearInputFieldButton.jsx","components/ConfirmationIconComponent/ConfirmationIconComponent.styled.js","components/ConfirmationIconComponent/ConfirmationIconComponent.jsx","components/ShowPasswordButton/ShowPasswordButton.styled.js","components/ShowPasswordButton/ShowPasswordButton.jsx","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.styled.js","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport bgMobile1x from '../../images/background/bg-mobile@1x.png';\nimport bgMobile2x from '../../images/background/bg-mobile@2x.png';\nimport bgTablet1x from '../../images/background/bg-tablet@1x.png';\nimport bgTablet2x from '../../images/background/bg-tablet@2x.png';\nimport bgDesktop1x from '../../images/background/bg-desktop@1x.png';\nimport bgDesktop2x from '../../images/background/bg-desktop@2x.png';\n\nexport const StyledBackgroundImg = styled.div`\n  width: 100%;\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-color: var(--background);\n  background-image: url(${bgMobile1x});\n  background-repeat: no-repeat;\n\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    background-image: url(${bgMobile2x});\n  }\n\n  @media screen and (min-width: 768px) {\n    background-image: url(${bgTablet1x});\n\n    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n      background-image: url(${bgTablet2x});\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    background-image: url(${bgDesktop1x});\n\n    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n      background-image: url(${bgDesktop2x});\n    }\n  }\n`;\n","import { StyledBackgroundImg } from './BackgroundImg.styled';\n\nconst BackgroundImg = ({ children }) => {\n  return <StyledBackgroundImg>{children}</StyledBackgroundImg>;\n};\n\nexport default BackgroundImg;\n","import styled from 'styled-components';\r\n\r\nexport const ClearBtn = styled.button`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  padding: 0;\r\n\r\n  position: absolute;\r\n  top: 50%;\r\n  right: ${({ $positionRight }) => `${$positionRight}px`};\r\n  transform: translateY(-50%);\r\n\r\n  background-color: transparent;\r\n  border: none;\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Svg = styled.svg`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  stroke: var(--red);\r\n`;\r\n\r\nexport const Use = styled.use``;\r\n","import PropTypes from 'prop-types';\r\nimport { useField } from 'formik';\r\nimport sprite from 'images/icons/sprite.svg';\r\nimport { ClearBtn, Svg, Use } from './ClearInputFieldButton.styled';\r\n\r\nconst ClearInputFieldButton = ({ name, positionRight = 16 }) => {\r\n  const [, , helpers] = useField(name);\r\n\r\n  const handleClick = () => {\r\n    helpers.setValue('');\r\n  };\r\n\r\n  return (\r\n    <ClearBtn\r\n      type=\"button\"\r\n      onClick={handleClick}\r\n      $positionRight={positionRight}\r\n    >\r\n      <Svg>\r\n        <Use href={`${sprite}#icon-cross-small`} />\r\n      </Svg>\r\n    </ClearBtn>\r\n  );\r\n};\r\n\r\nexport default ClearInputFieldButton;\r\n\r\nClearInputFieldButton.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  positionRight: PropTypes.number,\r\n};","import styled from 'styled-components';\r\n\r\nexport const ConfirmationSvg = styled.svg`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  position: absolute;\r\n  top: 50%;\r\n  right: ${({ $positionRight }) => `${$positionRight}px`};\r\n  transform: translateY(-50%);\r\n\r\n  stroke: var(--green);\r\n`;\r\n\r\nexport const Use = styled.use``;\r\n","import PropTypes from 'prop-types';\r\nimport sprite from 'images/icons/sprite.svg';\r\nimport { ConfirmationSvg, Use } from './ConfirmationIconComponent.styled';\r\n\r\nconst ConfirmationIconComponent = ({ positionRight = 16 }) => {\r\n  return (\r\n    <ConfirmationSvg $positionRight={positionRight}>\r\n      <Use href={`${sprite}#icon-check`} />\r\n    </ConfirmationSvg>\r\n  );\r\n};\r\n\r\nexport default ConfirmationIconComponent;\r\n\r\nConfirmationIconComponent.propTypes = {\r\n  positionRight: PropTypes.number,\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const EyeBtn = styled.button`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  padding: 0;\r\n\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 16px;\r\n  transform: translateY(-50%);\r\n\r\n  background-color: transparent;\r\n  border: none;\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Svg = styled.svg`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  stroke: var(--blueLink);\r\n`;\r\n\r\nexport const Use = styled.use``;\r\n","import PropTypes from 'prop-types';\r\nimport sprite from 'images/icons/sprite.svg';\r\nimport { EyeBtn, Svg, Use } from './ShowPasswordButton.styled';\r\n\r\nconst ShowPasswordButton = ({ isOpen, onClick }) => {\r\n  return (\r\n    <EyeBtn type=\"button\" onClick={onClick}>\r\n      {isOpen ? (\r\n        <Svg>\r\n          <Use href={`${sprite}#icon-eye-open`} />\r\n        </Svg>\r\n      ) : (\r\n        <Svg>\r\n          <Use href={`${sprite}#icon-eye-closed`} />\r\n        </Svg>\r\n      )}\r\n    </EyeBtn>\r\n  );\r\n};\r\n\r\nexport default ShowPasswordButton;\r\n\r\nShowPasswordButton.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n","import styled from '@emotion/styled';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Form, Field } from 'formik';\r\n\r\nexport const ToastText = styled.span`\r\n  font-weight: 600;\r\n`;\r\n\r\nexport const RegForm = styled(Form)`\r\n  width: 280px;\r\n  height: 479px;\r\n  padding: 28px 12px 28px 12px;\r\n  margin: 45px auto 34px;\r\n  background-color: var(--white);\r\n  border-radius: 20px;\r\n  box-shadow: 3px 8px 14px 0px #88c6fd30;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: 608px;\r\n    height: 629px;\r\n    padding: 56px 75px 56px 75px;\r\n    margin-top: 80px;\r\n    margin-bottom: 247px;\r\n    border-radius: 40px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    height: 617px;\r\n    margin-bottom: 75px;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  margin: 0 0 20px 0;\r\n\r\n  text-align: center;\r\n  font-weight: 500;\r\n  font-size: 24px;\r\n  line-height: 1.5;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    margin: 0 0 40px 0;\r\n\r\n    font-size: 36px;\r\n    letter-spacing: 0.04em;\r\n  }\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  position: relative;\r\n`;\r\n\r\nconst InputStyles = `\r\n  width: 256px;\r\n  height: 48px;\r\n\r\n  margin-bottom: 20px;\r\n\r\n  font-weight: 400;\r\n  font-size: 16px;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.04em;\r\n\r\n  border-radius: 40px;\r\n  border: solid 1px;\r\n\r\n  outline: none;\r\n\r\n  transition: box-shadow var(--transition), border-color var(--transition);\r\n\r\n  ::placeholder {\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n    line-height: 1.5;\r\n    letter-spacing: 0.04em;\r\n\r\n    color: var(--gray);\r\n  }\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: 458px;\r\n\r\n    margin-bottom: 32px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n  }\r\n`;\r\n\r\nexport const InputForEmailName = styled(Field)`\r\n  ${InputStyles}\r\n\r\n  ${({ error, valid }) => {\r\n    if (error) {\r\n      return `\r\n        padding: 12px 46px 12px 16px;\r\n\r\n        border-color: var(--red);\r\n        &:focus {\r\n          box-shadow: 0 0 0 1px var(--red);\r\n        }\r\n      `;\r\n    }\r\n    if (valid) {\r\n      return `\r\n        padding: 12px 46px 12px 16px;\r\n\r\n        border-color: var(--green);\r\n        &:focus {\r\n          box-shadow: 0 0 0 1px var(--green);\r\n        }\r\n      `;\r\n    }\r\n    return `\r\n      padding: 12px 16px;  \r\n\r\n      border-color: var(--blueLink);\r\n      &:focus {\r\n        box-shadow: 0 0 0 1px var(--blueLink);\r\n      }\r\n    `;\r\n  }}\r\n`;\r\n\r\nexport const InputForPasswords = styled(Field)`\r\n  ${InputStyles}\r\n\r\n  ${({ error, valid }) => {\r\n    if (error) {\r\n      return `\r\n        padding: 12px 74px 12px 16px;\r\n\r\n        border-color: var(--red);\r\n        &:focus {\r\n          box-shadow: 0 0 0 1px var(--red);\r\n        }\r\n      `;\r\n    }\r\n    if (valid) {\r\n      return `\r\n        padding: 12px 74px 12px 16px;\r\n\r\n        border-color: var(--green);\r\n        &:focus {\r\n          box-shadow: 0 0 0 1px var(--green);\r\n        }\r\n      `;\r\n    }\r\n    return `\r\n      padding: 12px 46px 12px 16px;  \r\n\r\n      border-color: var(--blueLink);\r\n      &:focus {\r\n        box-shadow: 0 0 0 1px var(--blueLink);\r\n      }\r\n    `;\r\n  }}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  width: 256px;\r\n  height: 48px;\r\n\r\n  margin: 20px 0 12px 0;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  letter-spacing: 0.04em;\r\n\r\n  border-radius: 40px;\r\n  border: none;\r\n\r\n  cursor: pointer;\r\n\r\n  color: var(--white);\r\n  background-color: var(--blueLink);\r\n\r\n  ${({ disabled }) =>\r\n    disabled &&\r\n    `\r\n    background-color: var(--gray);\r\n    cursor: not-allowed;\r\n\r\n    &:hover,\r\n  &:focus {\r\n    background-color: var(--gray);\r\n  }\r\n  `};\r\n\r\n  ${({ disabled }) =>\r\n    !disabled &&\r\n    `\r\n    &:hover,\r\n  &:focus {\r\n    background-color: #00bfff;\r\n  }\r\n  `};\r\n\r\n  transition: background-color var(--transition);\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: 458px;\r\n\r\n    margin: 20px 0 20px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    margin: 8px 0 20px 0;\r\n  }\r\n`;\r\n\r\nexport const ExtraText = styled.p`\r\n  text-align: center;\r\n  font-weight: 400;\r\n  font-size: 12px;\r\n  letter-spacing: 0.04em;\r\n\r\n  color: var(--gray);\r\n\r\n  @media screen and (min-width: 768px) {\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n  }\r\n`;\r\n\r\nconst MessagesStyles = `\r\n  position: absolute;\r\n  bottom: -31px;\r\n\r\n  font-weight: 400;\r\n  font-size: 12px;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    bottom: -36px;\r\n    left: 18px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n  }\r\n`;\r\n\r\nexport const ErrorText = styled.p`\r\n  ${MessagesStyles}\r\n\r\n  color: var(--red);\r\n`;\r\n\r\nexport const PasswordSecureText = styled.p`\r\n  ${MessagesStyles}\r\n\r\n  color: var(--green);\r\n`;\r\n\r\nexport const LinkToLogin = styled(NavLink)`\r\n  text-decoration: underline;\r\n\r\n  color: var(--blueLink);\r\n\r\n  @media screen and (min-width: 768px) {\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n  }\r\n`;\r\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { nanoid } from 'nanoid';\nimport * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport ShowPasswordButton from 'components/ShowPasswordButton';\nimport ClearInputFieldButton from 'components/ClearInputFieldButton';\nimport ConfirmationIconComponent from 'components/ConfirmationIconComponent';\nimport { useAuth } from 'hooks/useAuth';\nimport { register } from 'redux/AuthSlice/operations';\nimport BackgroundImg from '../BackgroundImg/BackgroundImg';\nimport {\n  ToastText,\n  RegForm,\n  Title,\n  Label,\n  InputForEmailName,\n  InputForPasswords,\n  Button,\n  ExtraText,\n  ErrorText,\n  PasswordSecureText,\n  LinkToLogin,\n} from './RegisterForm.styled';\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Name must be at least 2 characters long.')\n    .max(16, 'Name must not exceed 16 characters.')\n    .required('Name is required.'),\n  email: yup\n    .string()\n    .matches(\n      /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n      'Example: user@gmail.com'\n    )\n    .required('Email is required.'),\n  password: yup\n    .string()\n    .min(6, 'Password must be at least 6 characters long.')\n    .max(16, 'Password must not exceed 16 characters.')\n    .matches(\n      /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{6,16}$/,\n      'Require 1 uppercase, 1 lowercase, and 1 digit.'\n    )\n    .required('Password is required.'),\n  confirmPassword: yup\n    .string()\n    .required('Confirm password is required.')\n    .oneOf([yup.ref('password'), null], 'Passwords must match.'),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\nconst nameInputId = nanoid();\nconst emailInputId = nanoid();\nconst passwordInputId = nanoid();\nconst confirmPasswordInputId = nanoid();\n\nconst RegisterForm = () => {\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [confirmPasswordVisible, setConfirmPasswordVisible] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  const { isLoading } = useAuth();\n  const dispatch = useDispatch();\n\n  const handleValidation = async values => {\n    try {\n      await schema.validate(values, { abortEarly: false });\n      setIsFormValid(true);\n    } catch (error) {\n      setIsFormValid(false);\n    }\n  };\n\n  const handleSubmit = async ({ name, email, password }, { resetForm }) => {\n    try {\n      const {\n        meta: { requestStatus },\n        payload,\n      } = await dispatch(register({ name, email, password }));\n\n      if (requestStatus === 'rejected') {\n        throw new Error(payload);\n      }\n\n      resetForm();\n\n    } catch (error) {\n      const { message } = error;\n\n      toast.error(<ToastText>{message}</ToastText>, {\n        autoClose: 2000,\n      });\n\n      resetForm({\n        values: {\n          name,\n          email,\n          password,\n          confirmPassword: '',\n        },\n      });\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const toggleConfirmPasswordVisibility = () => {\n    setConfirmPasswordVisible(!confirmPasswordVisible);\n  };\n\n  return (\n    <>\n      <BackgroundImg>\n        <ToastContainer />\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          onSubmit={handleSubmit}\n          validate={handleValidation}\n        >\n          {({ errors, touched }) => (\n            <RegForm>\n              <Title>Registration</Title>\n\n              <Label htmlFor={nameInputId}>\n                <InputForEmailName\n                  autoComplete=\"on\"\n                  type=\"text\"\n                  id={nameInputId}\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  error={touched.name && errors.name ? 1 : 0}\n                  valid={touched.name && !errors.name ? 1 : 0}\n                />\n                {touched.name && errors.name && (\n                  <ClearInputFieldButton name=\"name\" />\n                )}\n                {touched.name && !errors.name && <ConfirmationIconComponent />}\n                <FormError name=\"name\" />\n              </Label>\n\n              <Label htmlFor={emailInputId}>\n                <InputForEmailName\n                  autoComplete=\"on\"\n                  type=\"email\"\n                  id={emailInputId}\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  error={touched.email && errors.email ? 1 : 0}\n                  valid={touched.email && !errors.email ? 1 : 0}\n                />\n                {touched.email && errors.email && (\n                  <ClearInputFieldButton name=\"email\" />\n                )}\n                {touched.email && !errors.email && (\n                  <ConfirmationIconComponent />\n                )}\n                <FormError name=\"email\" />\n              </Label>\n\n              <Label htmlFor={passwordInputId}>\n                <InputForPasswords\n                  type={passwordVisible ? 'text' : 'password'}\n                  id={passwordInputId}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  error={touched.password && errors.password ? 1 : 0}\n                  valid={touched.password && !errors.password ? 1 : 0}\n                />\n                {touched.password && errors.password && (\n                  <ClearInputFieldButton name=\"password\" positionRight={46} />\n                )}\n                {touched.password && !errors.password && (\n                  <ConfirmationIconComponent positionRight={46} />\n                )}\n                <ShowPasswordButton\n                  isOpen={passwordVisible}\n                  onClick={togglePasswordVisibility}\n                />\n                {touched.password && !errors.password && !passwordVisible && (\n                  <PasswordSecureText>Password is secure.</PasswordSecureText>\n                )}\n                <FormError name=\"password\" />\n              </Label>\n\n              <Label htmlFor={confirmPasswordInputId}>\n                <InputForPasswords\n                  type={confirmPasswordVisible ? 'text' : 'password'}\n                  id={confirmPasswordInputId}\n                  name=\"confirmPassword\"\n                  placeholder=\"Confirm password\"\n                  error={\n                    touched.confirmPassword && errors.confirmPassword ? 1 : 0\n                  }\n                  valid={\n                    touched.confirmPassword && !errors.confirmPassword ? 1 : 0\n                  }\n                />\n                {touched.confirmPassword && errors.confirmPassword && (\n                  <ClearInputFieldButton\n                    name=\"confirmPassword\"\n                    positionRight={46}\n                  />\n                )}\n                {touched.confirmPassword && !errors.confirmPassword && (\n                  <ConfirmationIconComponent positionRight={46} />\n                )}\n                <ShowPasswordButton\n                  isOpen={confirmPasswordVisible}\n                  onClick={toggleConfirmPasswordVisibility}\n                />\n                {touched.confirmPassword &&\n                  !errors.confirmPassword &&\n                  !confirmPasswordVisible && (\n                    <PasswordSecureText>Password is secure.</PasswordSecureText>\n                  )}\n                <FormError name=\"confirmPassword\" />\n              </Label>\n\n              <Button disabled={isLoading || !isFormValid} type=\"submit\">\n                {isLoading ? 'Loading...' : 'Registration'}\n              </Button>\n\n              <ExtraText>\n                Already have an account?{' '}\n                <LinkToLogin to=\"/login\">Login</LinkToLogin>\n              </ExtraText>\n            </RegForm>\n          )}\n        </Formik>\n      </BackgroundImg>\n    </>\n  );\n};\n\nexport default RegisterForm;\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n","import RegisterForm from 'components/RegisterForm';\nimport { Wrapper } from './RegisterPage.styled';\n\nconst RegisterPage = () => {\n  return (\n    <Wrapper>\n      <RegisterForm />\n    </Wrapper>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["StyledBackgroundImg","styled","bgMobile1x","bgMobile2x","bgTablet1x","bgTablet2x","bgDesktop1x","bgDesktop2x","children","ClearBtn","$positionRight","Svg","Use","name","positionRight","useField","helpers","type","onClick","setValue","href","sprite","ConfirmationSvg","EyeBtn","isOpen","ToastText","RegForm","Form","Title","Label","InputStyles","InputForEmailName","Field","error","valid","InputForPasswords","Button","disabled","ExtraText","MessagesStyles","ErrorText","PasswordSecureText","LinkToLogin","NavLink","FormError","render","message","schema","yup","shape","min","max","required","email","matches","password","confirmPassword","oneOf","initialValues","nameInputId","nanoid","emailInputId","passwordInputId","confirmPasswordInputId","useState","passwordVisible","setPasswordVisible","confirmPasswordVisible","setConfirmPasswordVisible","isFormValid","setIsFormValid","isLoading","useAuth","dispatch","useDispatch","handleValidation","values","validate","abortEarly","handleSubmit","resetForm","register","requestStatus","meta","payload","Error","toast","autoClose","togglePasswordVisibility","toggleConfirmPasswordVisibility","BackgroundImg","validationSchema","onSubmit","errors","touched","htmlFor","autoComplete","id","placeholder","ClearInputFieldButton","ConfirmationIconComponent","ShowPasswordButton","to","Wrapper"],"sourceRoot":""}
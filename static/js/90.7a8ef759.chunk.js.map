{"version":3,"file":"static/js/90.7a8ef759.chunk.js","mappings":"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","sources":["components/ClearInputFieldButton/ClearInputFieldButton.styled.js","components/ClearInputFieldButton/ClearInputFieldButton.jsx","components/ConfirmationIconComponent/ConfirmationIconComponent.styled.js","components/ConfirmationIconComponent/ConfirmationIconComponent.jsx","components/ShowPasswordButton/ShowPasswordButton.styled.js","components/ShowPasswordButton/ShowPasswordButton.jsx","components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.js","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const ClearBtn = styled.button`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  padding: 0;\r\n\r\n  position: absolute;\r\n  top: 50%;\r\n  right: ${({ $positionRight }) => `${$positionRight}px`};\r\n  transform: translateY(-50%);\r\n\r\n  background-color: transparent;\r\n  border: none;\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Svg = styled.svg`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  stroke: var(--red);\r\n`;\r\n\r\nexport const Use = styled.use``;\r\n","import PropTypes from 'prop-types';\r\nimport { useField } from 'formik';\r\nimport sprite from 'images/icons/sprite.svg';\r\nimport { ClearBtn, Svg, Use } from './ClearInputFieldButton.styled';\r\n\r\nconst ClearInputFieldButton = ({ name, positionRight = 16 }) => {\r\n  const [, , helpers] = useField(name);\r\n\r\n  const handleClick = () => {\r\n    helpers.setValue('');\r\n  };\r\n\r\n  return (\r\n    <ClearBtn\r\n      type=\"button\"\r\n      onClick={handleClick}\r\n      $positionRight={positionRight}\r\n    >\r\n      <Svg>\r\n        <Use href={`${sprite}#icon-cross-small`} />\r\n      </Svg>\r\n    </ClearBtn>\r\n  );\r\n};\r\n\r\nexport default ClearInputFieldButton;\r\n\r\nClearInputFieldButton.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  positionRight: PropTypes.number,\r\n};","import styled from 'styled-components';\r\n\r\nexport const ConfirmationSvg = styled.svg`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  position: absolute;\r\n  top: 50%;\r\n  right: ${({ $positionRight }) => `${$positionRight}px`};\r\n  transform: translateY(-50%);\r\n\r\n  stroke: var(--green);\r\n`;\r\n\r\nexport const Use = styled.use``;\r\n","import PropTypes from 'prop-types';\r\nimport sprite from 'images/icons/sprite.svg';\r\nimport { ConfirmationSvg, Use } from './ConfirmationIconComponent.styled';\r\n\r\nconst ConfirmationIconComponent = ({ positionRight = 16 }) => {\r\n  return (\r\n    <ConfirmationSvg $positionRight={positionRight}>\r\n      <Use href={`${sprite}#icon-check`} />\r\n    </ConfirmationSvg>\r\n  );\r\n};\r\n\r\nexport default ConfirmationIconComponent;\r\n\r\nConfirmationIconComponent.propTypes = {\r\n  positionRight: PropTypes.number,\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const EyeBtn = styled.button`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  padding: 0;\r\n\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 16px;\r\n  transform: translateY(-50%);\r\n\r\n  background-color: transparent;\r\n  border: none;\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Svg = styled.svg`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  stroke: var(--blueLink);\r\n`;\r\n\r\nexport const Use = styled.use``;\r\n","import PropTypes from 'prop-types';\r\nimport sprite from 'images/icons/sprite.svg';\r\nimport { EyeBtn, Svg, Use } from './ShowPasswordButton.styled';\r\n\r\nconst ShowPasswordButton = ({ isOpen, onClick }) => {\r\n  return (\r\n    <EyeBtn type=\"button\" onClick={onClick}>\r\n      {isOpen ? (\r\n        <Svg>\r\n          <Use href={`${sprite}#icon-eye-open`} />\r\n        </Svg>\r\n      ) : (\r\n        <Svg>\r\n          <Use href={`${sprite}#icon-eye-closed`} />\r\n        </Svg>\r\n      )}\r\n    </EyeBtn>\r\n  );\r\n};\r\n\r\nexport default ShowPasswordButton;\r\n\r\nShowPasswordButton.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n","import styled from '@emotion/styled';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Form, Field } from 'formik';\r\n\r\nexport const ToastText = styled.span`\r\n  font-weight: 600;\r\n`;\r\n\r\nexport const LogForm = styled(Form)`\r\n  width: 280px;\r\n  height: 425px;\r\n\r\n  padding: 28px 12px 28px 12px;\r\n  margin-top: 45px;\r\n\r\n  background-color: var(--white);\r\n  border-radius: 20px;\r\n  box-shadow: 3px 8px 14px 0px #88c6fd30;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: 608px;\r\n    height: 481px;\r\n\r\n    padding: 56px 75px 56px 75px;\r\n    margin-top: 92px;\r\n\r\n    border-radius: 40px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  margin: 0 0 20px 0;\r\n\r\n  text-align: center;\r\n  font-weight: 500;\r\n  font-size: 24px;\r\n  line-height: 1.5;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    margin: 0 0 40px 0;\r\n\r\n    font-size: 36px;\r\n    letter-spacing: 0.04em;\r\n  }\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  position: relative;\r\n`;\r\n\r\nconst InputStyles = `\r\n  width: 256px;\r\n  height: 48px;\r\n\r\n  margin-bottom: 20px;\r\n\r\n  font-weight: 400;\r\n  font-size: 16px;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.04em;\r\n\r\n  border-radius: 40px;\r\n  border: solid 1px;\r\n\r\n  outline: none;\r\n\r\n  transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1), border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n  ::placeholder {\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n    line-height: 1.5;\r\n    letter-spacing: 0.04em;\r\n\r\n    color: var(--gray);\r\n  }\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: 458px;\r\n\r\n    margin-bottom: 32px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n  }\r\n`;\r\n\r\nexport const InputForEmail = styled(Field)`\r\n  ${InputStyles}\r\n\r\n  ${({ error, valid }) => {\r\n    if (error) {\r\n      return `\r\n        padding: 12px 46px 12px 16px;\r\n\r\n        border-color: var(--red);\r\n        &:focus {\r\n          box-shadow: 0 0 0 1px var(--red);\r\n        }\r\n      `;\r\n    }\r\n    if (valid) {\r\n      return `\r\n        padding: 12px 46px 12px 16px;\r\n\r\n        border-color: var(--green);\r\n        &:focus {\r\n          box-shadow: 0 0 0 1px var(--green);\r\n        }\r\n      `;\r\n    }\r\n    return `\r\n      padding: 12px 16px;  \r\n\r\n      border-color: var(--blueLink);\r\n      &:focus {\r\n        box-shadow: 0 0 0 1px var(--blueLink);\r\n      }\r\n    `;\r\n  }}\r\n`;\r\n\r\nexport const InputForPassword = styled(Field)`\r\n  ${InputStyles}\r\n\r\n  ${({ error, valid }) => {\r\n    if (error) {\r\n      return `\r\n        padding: 12px 74px 12px 16px;\r\n\r\n        border-color: var(--red);\r\n        &:focus {\r\n          box-shadow: 0 0 0 1px var(--red);\r\n        }\r\n      `;\r\n    }\r\n    if (valid) {\r\n      return `\r\n        padding: 12px 74px 12px 16px;\r\n\r\n        border-color: var(--green);\r\n        &:focus {\r\n          box-shadow: 0 0 0 1px var(--green);\r\n        }\r\n      `;\r\n    }\r\n    return `\r\n      padding: 12px 46px 12px 16px;  \r\n\r\n      border-color: var(--blueLink);\r\n      &:focus {\r\n        box-shadow: 0 0 0 1px var(--blueLink);\r\n      }\r\n    `;\r\n  }}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  width: 256px;\r\n  height: 48px;\r\n\r\n  margin: 90px 0 12px 0;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  letter-spacing: 0.04em;\r\n\r\n  border-radius: 40px;\r\n  border: none;\r\n\r\n  cursor: pointer;\r\n\r\n  color: var(--white);\r\n  background-color: var(--blueLink);\r\n\r\n  ${({ disabled }) =>\r\n    disabled &&\r\n    `\r\n    background-color: var(--gray);\r\n    cursor: not-allowed;\r\n\r\n    &:hover,\r\n  &:focus {\r\n    background-color: var(--gray);\r\n  }\r\n  `};\r\n\r\n  ${({ disabled }) =>\r\n    !disabled &&\r\n    `\r\n    &:hover,\r\n  &:focus {\r\n    background-color: #00bfff;\r\n  }\r\n  `};\r\n\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: 458px;\r\n\r\n    margin: 28px 0 20px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    margin: 28px 0 20px 0;\r\n  }\r\n`;\r\n\r\nexport const ExtraText = styled.p`\r\n  text-align: center;\r\n  font-weight: 400;\r\n  font-size: 12px;\r\n  letter-spacing: 0.04em;\r\n\r\n  color: var(--gray);\r\n\r\n  @media screen and (min-width: 768px) {\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n  }\r\n`;\r\n\r\nconst MessagesStyles = `\r\nposition: absolute;\r\n  bottom: -34px;\r\n  left: -8px;\r\n\r\n  font-weight: 400;\r\n  font-size: 12px;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    bottom: -36px;\r\n    left: 18px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n  }\r\n`;\r\n\r\nexport const ErrorText = styled.p`\r\n  ${MessagesStyles}\r\n\r\n  color: var(--red);\r\n`;\r\n\r\nexport const PasswordSecureText = styled.p`\r\n  ${MessagesStyles}\r\n\r\n  color: var(--green);\r\n`;\r\n\r\nexport const LinkToRegister = styled(NavLink)`\r\n  text-decoration: underline;\r\n\r\n  color: var(--blueLink);\r\n\r\n  @media screen and (min-width: 768px) {\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n  }\r\n`;\r\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { nanoid } from 'nanoid';\nimport * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport ShowPasswordButton from 'components/ShowPasswordButton';\nimport ClearInputFieldButton from 'components/ClearInputFieldButton';\nimport ConfirmationIconComponent from 'components/ConfirmationIconComponent';\nimport { useAuth } from 'hooks/useAuth';\nimport { logIn } from 'redux/AuthSlice/operations';\nimport {\n  ToastText,\n  LogForm,\n  Title,\n  Label,\n  InputForEmail,\n  InputForPassword,\n  Button,\n  ExtraText,\n  ErrorText,\n  PasswordSecureText,\n  LinkToRegister,\n} from './LoginForm.styled';\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .matches(\n      /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n      'Example: user@gmail.com'\n    )\n    .required('Email is required.'),\n  password: yup\n    .string()\n    .min(6, 'Password must be at least 6 characters long.')\n    .max(16, 'Password must not exceed 16 characters.')\n    // .matches(\n    //   /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{6,16}$/,\n    //   'Require 1 uppercase, 1 lowercase, and 1 digit.'\n    // )\n    .required('Password is required.'),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst emailInputId = nanoid();\nconst passwordInputId = nanoid();\n\nconst LoginForm = () => {\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // const navigate = useNavigate();\n\n  const { isLoading } = useAuth();\n  const dispatch = useDispatch();\n\n   const handleValidation = async (values) => {\n    try {\n      await schema.validate(values, { abortEarly: false });\n      setIsFormValid(true);\n    } catch (error) {\n      setIsFormValid(false);\n    }\n  };\n\n  const handleSubmit = async ({ email, password }, { resetForm }) => {\n    try {\n      const {\n        meta: { requestStatus },\n        payload,\n      } = await dispatch(logIn({ email, password }));\n\n      if (requestStatus === 'rejected') {\n        throw new Error(payload);\n      }\n\n      resetForm();\n\n      // navigate('/user');\n    } catch (error) {\n      const { message } = error;\n\n      toast.error(<ToastText>{message}</ToastText>, {\n        autoClose: 2000,\n      });\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  return (\n    <>\n      <ToastContainer />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n        validate={handleValidation}\n      >\n        {({ errors, touched }) => (\n          <LogForm>\n            <Title>Login</Title>\n\n            <Label htmlFor={emailInputId}>\n              <InputForEmail\n                autoComplete=\"on\"\n                type=\"email\"\n                id={emailInputId}\n                name=\"email\"\n                placeholder=\"Email\"\n                error={touched.email && errors.email ? 1 : 0}\n                valid={touched.email && !errors.email ? 1 : 0}\n              />\n              {touched.email && errors.email && (\n                <ClearInputFieldButton name=\"email\" />\n              )}\n              {touched.email && !errors.email && <ConfirmationIconComponent />}\n              <FormError name=\"email\" />\n            </Label>\n\n            <Label htmlFor={passwordInputId}>\n              <InputForPassword\n                type={passwordVisible ? 'text' : 'password'}\n                id={passwordInputId}\n                name=\"password\"\n                placeholder=\"Password\"\n                error={touched.password && errors.password ? 1 : 0}\n                valid={touched.password && !errors.password ? 1 : 0}\n              />\n              {touched.password && errors.password && (\n                <ClearInputFieldButton name=\"password\" positionRight={46} />\n              )}\n              {touched.password && !errors.password && (\n                <ConfirmationIconComponent positionRight={46} />\n              )}\n              <ShowPasswordButton\n                isOpen={passwordVisible}\n                onClick={togglePasswordVisibility}\n              />\n              {touched.password && !errors.password && !passwordVisible && (\n                <PasswordSecureText>Password is secure.</PasswordSecureText>\n              )}\n              <FormError name=\"password\" />\n            </Label>\n\n            <Button disabled={isLoading || !isFormValid} type=\"submit\">\n              {isLoading ? 'Loading...' : 'Login'}\n            </Button>\n\n            <ExtraText>\n              Don't have an account?{' '}\n              <LinkToRegister to=\"/register\">Register</LinkToRegister>\n            </ExtraText>\n          </LogForm>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n","import LoginForm from 'components/LoginForm';\nimport { Wrapper } from './LoginPage.styled';\n\nconst LoginPage = () => {\n  return (\n    <Wrapper>\n      <LoginForm />\n    </Wrapper>\n  );\n};\n\nexport default LoginPage;\n"],"names":["ClearBtn","styled","$positionRight","Svg","Use","name","positionRight","useField","helpers","type","onClick","setValue","href","sprite","ConfirmationSvg","EyeBtn","isOpen","ToastText","LogForm","Form","Title","Label","InputStyles","InputForEmail","Field","error","valid","InputForPassword","Button","disabled","ExtraText","MessagesStyles","ErrorText","PasswordSecureText","LinkToRegister","NavLink","FormError","render","message","schema","yup","shape","email","matches","required","password","min","max","initialValues","emailInputId","nanoid","passwordInputId","useState","passwordVisible","setPasswordVisible","isFormValid","setIsFormValid","isLoading","useAuth","dispatch","useDispatch","handleValidation","values","validate","abortEarly","handleSubmit","resetForm","logIn","requestStatus","meta","payload","Error","toast","autoClose","togglePasswordVisibility","validationSchema","onSubmit","errors","touched","htmlFor","autoComplete","id","placeholder","ClearInputFieldButton","ConfirmationIconComponent","ShowPasswordButton","to","Wrapper"],"sourceRoot":""}